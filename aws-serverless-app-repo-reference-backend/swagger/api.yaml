swagger: '2.0'

info:
  title:
    Fn::Sub: aws-serverless-app-repo-reference-backend-${Stage}
  description: Reference implementation of AWS Serverless Application Repository
  version: "2019-10-13"

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

# Enable request validator. See doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-sample-api-swagger.html
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

# Provide more detailed error message for bad request body errors. See doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-gateway-responses.html
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    responseTemplates:
      application/json: '{"errorCode": "BadRequestBody", "message": "$context.error.validationErrorString"}'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
securityDefinitions:
  cognitoAuthorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      providerARNs:
        - Fn::GetAtt: 'ApplicationsApiUserPool.Arn'
      type: cognito_user_pools
paths:
  /applications:
    post:
      operationId: CreateApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: CreateApplicationInput
          in: body
          required: true
          schema:
            "$ref": "#/definitions/CreateApplicationInput"
      responses:
        201:
          schema:
            "$ref": "#/definitions/Application"
        400:
          schema:
            "$ref": "#/definitions/BadRequestException"
        401:
          schema:
            "$ref": "#/definitions/UnauthorizedException"
        409:
          schema:
            "$ref": "#/definitions/ConflictException"
        429:
          schema:
            "$ref": "#/definitions/TooManyRequestsException"
        500:
          schema:
            "$ref": "#/definitions/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    get:
      operationId: ListApplications
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: nextToken
          in: query
          type: string
          required: false
        - name: maxItems
          in: query
          type: integer
          required: false
          minimum: 1
          maximum: 100
      responses:
        200:
          schema:
            "$ref": "#/definitions/ApplicationList"
        400:
          schema:
            "$ref": "#/definitions/BadRequestException"
        401:
          schema:
            "$ref": "#/definitions/UnauthorizedException"
        429:
          schema:
            "$ref": "#/definitions/TooManyRequestsException"
        500:
          schema:
            "$ref": "#/definitions/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
          - cognitoAuthorizer: []
  /applications/{applicationId}:
    get:
      operationId: GetApplication
      produces:
        - application/json
      parameters:
        - name: applicationId
          in: path
          type: string
          required: true
          pattern: "^[a-zA-Z0-9\\-]{3,128}$"
      responses:
        200:
          schema:
            "$ref": "#/definitions/Application"
        400:
          schema:
            "$ref": "#/definitions/BadRequestException"
        401:
          schema:
            "$ref": "#/definitions/UnauthorizedException"
        404:
          schema:
            "$ref": "#/definitions/NotFoundException"
        429:
          schema:
            "$ref": "#/definitions/TooManyRequestsException"
        500:
          schema:
            "$ref": "#/definitions/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    patch:
      operationId: UpdateApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: applicationId
          in: path
          type: string
          required: true
          pattern: "^[a-zA-Z0-9\\-]{3,128}$"
        - name: UpdateApplicationInput
          in: body
          required: true
          schema:
            "$ref": "#/definitions/UpdateApplicationInput"
      responses:
        200:
          schema:
            "$ref": "#/definitions/Application"
        400:
          schema:
            "$ref": "#/definitions/BadRequestException"
        401:
          schema:
            "$ref": "#/definitions/UnauthorizedException"
        404:
          schema:
            "$ref": "#/definitions/NotFoundException"
        409:
          schema:
            "$ref": "#/definitions/ConflictException"
        429:
          schema:
            "$ref": "#/definitions/TooManyRequestsException"
        500:
          schema:
            "$ref": "#/definitions/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    delete:
      operationId: DeleteApplication
      parameters:
        - name: applicationId
          in: path
          type: string
          required: true
          pattern: "^[a-zA-Z0-9\\-]{3,128}$"
      responses:
        204:
          description:  "Delete an application"
        400:
          schema:
            "$ref": "#/definitions/BadRequestException"
        401:
          schema:
            "$ref": "#/definitions/UnauthorizedException"
        404:
          schema:
            "$ref": "#/definitions/NotFoundException"
        409:
          schema:
            "$ref": "#/definitions/ConflictException"
        429:
          schema:
            "$ref": "#/definitions/TooManyRequestsException"
        500:
          schema:
            "$ref": "#/definitions/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
definitions:
  BadRequestException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  UnauthorizedException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  NotFoundException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  ConflictException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  TooManyRequestsException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  InternalServerErrorException:
    type: object
    properties:
      message:
        type: string
      errorCode:
        type: string
  CreateApplicationInput:
    type: object
    required:
      - applicationId
      - description
      - author
    properties:
      applicationId:
        type: string
        pattern: "^[a-zA-Z0-9\\-]{3,128}$"
      description:
        type: string
        minLength: 3
        maxLength: 256
      author:
        type: string
        pattern: "^[a-zA-Z0-9\\-]{1,128}$"
      homePageUrl:
        type: string
        pattern: "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$"
  UpdateApplicationInput:
    type: object
    properties:
      description:
        type: string
        minLength: 3
        maxLength: 256
      author:
        type: string
        pattern: "^[a-zA-Z0-9\\-]{1,128}$"
      homePageUrl:
        type: string
        pattern: "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$"
  Application:
    type: object
    required:
      - applicationId
      - description
      - author
    properties:
      applicationId:
        type: string
      description:
        type: string
      author:
        type: string
      creationTime:
        type: string
      homePageUrl:
        type: string
  ApplicationSummary:
    type: object
    properties:
      applicationId:
        type: string
      description:
        type: string
      creationTime:
        type: string
  ApplicationList:
    type: object
    properties:
      applications:
        type: array
        items:
          "$ref": "#/definitions/ApplicationSummary"
      nextToken:
        type: string
